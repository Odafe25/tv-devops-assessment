name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [dev, staging, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
          ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${AWS_REGION}.amazonaws.com
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
      
      - name: Set variables for project
        run: |
          echo "PROJECT_NAME=tv-devops" >> $GITHUB_ENV
      
      - name: Ensure ECR repository exists or Create it
        run: |
          aws ecr describe-repositories --repository-names ${PROJECT_NAME}-${{ matrix.environment }}-repo || \
          aws ecr create-repository --repository-name ${PROJECT_NAME}-${{ matrix.environment }}-repo
      

      - name: Build and push Docker image
        run: |
          IMAGE_URI="$ECR_REGISTRY/${PROJECT_NAME}-${{ matrix.environment }}-repo:latest"
          echo "ECR_IMAGE=$IMAGE_URI" >> $GITHUB_ENV 
          docker build -t $IMAGE_URI ./app
          docker push $IMAGE_URI

      - name: Install CDKTF
        run: npm install --global cdktf-cli

      - name: Install project dependencies
        working-directory: ./iac
        run: npm install

      - name: Install Node type definitions
        working-directory: ./iac
        run: npm install --save-dev @types/node
      
      - name: Install ts-node
        working-directory: ./iac
        run: npm install --save-dev ts-node

      - name: Compile TypeScript
        working-directory: ./iac
        run: npm run build

      - name: Install Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Build IaC now
        working-directory: ./iac
        run: npm run build

      
      - name: Bootstrap AWS Backend Resources
        run: |
          BUCKET_NAME="tv-devops-cdktf-state"
          DYNAMODB_TABLE="tf-locks"
          
          echo "Bootstrapping AWS resources for CDKTF backend..."
          
          
          echo "Setting up S3 bucket..."
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" --region $AWS_REGION 2>/dev/null; then
              echo "Creating S3 bucket '$BUCKET_NAME'..."
              
              
              aws s3 mb "s3://$BUCKET_NAME" --region $AWS_REGION
              
              
              aws s3api put-bucket-versioning \
                  --bucket "$BUCKET_NAME" \
                  --versioning-configuration Status=Enabled
              
              
              aws s3api put-bucket-encryption \
                  --bucket "$BUCKET_NAME" \
                  --server-side-encryption-configuration '{
                      "Rules": [{
                          "ApplyServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                          }
                      }]
                  }'
              
              
              aws s3api put-public-access-block \
                  --bucket "$BUCKET_NAME" \
                  --public-access-block-configuration \
                  "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
              
              echo "S3 bucket created and configured"
          else
              echo "S3 bucket already exists"
          fi
          
          
          echo "Setting up DynamoDB table..."
          if ! aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region $AWS_REGION 2>/dev/null; then
              echo "Creating DynamoDB table '$DYNAMODB_TABLE'..."
              
              aws dynamodb create-table \
                  --table-name "$DYNAMODB_TABLE" \
                  --attribute-definitions AttributeName=LockID,AttributeType=S \
                  --key-schema AttributeName=LockID,KeyType=HASH \
                  --billing-mode PAY_PER_REQUEST \
                  --region $AWS_REGION
              
              
              echo "Waiting for table to become active..."
              aws dynamodb wait table-exists --table-name "$DYNAMODB_TABLE" --region $AWS_REGION
              
              echo "DynamoDB table created"
          else
              echo "DynamoDB table already exists"
          fi
          
          echo "Bootstrap completed successfully!"
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}


      - name: Deploy to ${{ matrix.environment }} with CDKTF
        working-directory: ./iac
        env:
          ECR_IMAGE: ${{ env.ECR_REGISTRY }}/tv-devops:latest
          AWS_REGION: ${{ vars.AWS_REGION }}
          ENV: ${{ matrix.environment }}
          DOMAIN_NAME: ${{ vars.DOMAIN_NAME }}
        run: cdktf deploy --auto-approve 
